// Generated by gencpp from file leddar_ros/Specs.msg
// DO NOT EDIT!


#ifndef LEDDAR_ROS_MESSAGE_SPECS_H
#define LEDDAR_ROS_MESSAGE_SPECS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace leddar_ros
{
template <class ContainerAllocator>
struct Specs_
{
  typedef Specs_<ContainerAllocator> Type;

  Specs_()
    : h(0)
    , v(0)
    , h_fov(0.0)
    , v_fov(0.0)  {
    }
  Specs_(const ContainerAllocator& _alloc)
    : h(0)
    , v(0)
    , h_fov(0.0)
    , v_fov(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _h_type;
  _h_type h;

   typedef uint32_t _v_type;
  _v_type v;

   typedef float _h_fov_type;
  _h_fov_type h_fov;

   typedef float _v_fov_type;
  _v_fov_type v_fov;





  typedef boost::shared_ptr< ::leddar_ros::Specs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::leddar_ros::Specs_<ContainerAllocator> const> ConstPtr;

}; // struct Specs_

typedef ::leddar_ros::Specs_<std::allocator<void> > Specs;

typedef boost::shared_ptr< ::leddar_ros::Specs > SpecsPtr;
typedef boost::shared_ptr< ::leddar_ros::Specs const> SpecsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::leddar_ros::Specs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::leddar_ros::Specs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::leddar_ros::Specs_<ContainerAllocator1> & lhs, const ::leddar_ros::Specs_<ContainerAllocator2> & rhs)
{
  return lhs.h == rhs.h &&
    lhs.v == rhs.v &&
    lhs.h_fov == rhs.h_fov &&
    lhs.v_fov == rhs.v_fov;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::leddar_ros::Specs_<ContainerAllocator1> & lhs, const ::leddar_ros::Specs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace leddar_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::leddar_ros::Specs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::leddar_ros::Specs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leddar_ros::Specs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::leddar_ros::Specs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leddar_ros::Specs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::leddar_ros::Specs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::leddar_ros::Specs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7a6f0e497ec5e66f57cae8a1a9782c91";
  }

  static const char* value(const ::leddar_ros::Specs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7a6f0e497ec5e66fULL;
  static const uint64_t static_value2 = 0x57cae8a1a9782c91ULL;
};

template<class ContainerAllocator>
struct DataType< ::leddar_ros::Specs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "leddar_ros/Specs";
  }

  static const char* value(const ::leddar_ros::Specs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::leddar_ros::Specs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Channels are organized in a row-major, top-down fashion\n"
"uint32 h #horizontal resolution\n"
"uint32 v #vertical resolution\n"
"\n"
"# Fiel of Views in degrees\n"
"float32 h_fov #horizontal fov\n"
"float32 v_fov #vertical fov\n"
;
  }

  static const char* value(const ::leddar_ros::Specs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::leddar_ros::Specs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.h);
      stream.next(m.v);
      stream.next(m.h_fov);
      stream.next(m.v_fov);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Specs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::leddar_ros::Specs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::leddar_ros::Specs_<ContainerAllocator>& v)
  {
    s << indent << "h: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.h);
    s << indent << "v: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.v);
    s << indent << "h_fov: ";
    Printer<float>::stream(s, indent + "  ", v.h_fov);
    s << indent << "v_fov: ";
    Printer<float>::stream(s, indent + "  ", v.v_fov);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEDDAR_ROS_MESSAGE_SPECS_H
